'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = factory;

var _defaultOptions = require('./defaultOptions');

var _defaultOptions2 = _interopRequireDefault(_defaultOptions);

var _template = require('./template');

var _template2 = _interopRequireDefault(_template);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * factory
 * Returns a new template function with options applied
 * @param {Object} options
 * @param {boolean} options.mergeMiddleware If middleware defined in options should be merged with defaults. Default: false
 * @param {string} options.keyPrefix String prefix of keys in template. Default: @
 * @param {function[]} options.valueFns Array of functions to apply to values during render
 * @param {function[]} options.renderFns Array of functions to apply to the final render
 */
function factory() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var mergeMiddleware = options.mergeMiddleware || _defaultOptions2.default.mergeMiddleware;
  var keyPrefix = options.keyPrefix || _defaultOptions2.default.keyPrefix;
  var valueFns = void 0;
  var renderFns = void 0;

  if (options.valueFns) {
    if (mergeMiddleware) {
      valueFns = _defaultOptions2.default.concat(options.valueFns);
    } else {
      valueFns = options.valueFns;
    }
  } else {
    valueFns = _defaultOptions2.default.valueFns;
  }

  if (options.renderFns) {
    if (mergeMiddleware) {
      renderFns = _defaultOptions2.default.concat(options.renderFns);
    } else {
      renderFns = options.renderFns;
    }
  } else {
    renderFns = _defaultOptions2.default.renderFns;
  }

  var binding = { keyPrefix: keyPrefix, valueFns: valueFns, renderFns: renderFns };
  return _template2.default.bind({ binding: binding });
}