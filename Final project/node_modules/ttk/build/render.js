'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * render
 * Render template to string using context data
 * @param {Object} context - Data to render in the template`
 */
function render() {
  var context = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var _binding = this.binding;
  var strings = _binding.strings;
  var keys = _binding.keys;
  var keyPrefix = _binding.keyPrefix;
  var valueFns = _binding.valueFns;
  var renderFns = _binding.renderFns;

  /**
   * Raw rendered string without middleware functions ran
   */

  var rawRenderedString = keys.reduce(function (result, key, index) {
    /**
     * Regex pattern to test for key prefix
     */
    var keyPrefixPattern = new RegExp('^' + keyPrefix);

    /**
     * Key with key prefix removed
     */
    var contextKey = keyPrefixPattern.test(key) ? key.substring(keyPrefix.length) : key;

    /**
     * Raw value not processed through value middleware functions
     */
    var rawValue = context[contextKey] || key;

    /**
     * Value processed through value middleware functions
     */
    var value = valueFns.filter(function (fn) {
      return typeof fn === 'function';
    }).reduce(function (value, fn) {
      return fn(value);
    }, rawValue);

    return [].concat(_toConsumableArray(result), [value, strings[index + 1]]);
  }, [strings[0]]).join('');

  /**
   * Raw rendered string processed through render middleware functions
   */
  var renderedString = renderFns.filter(function (fn) {
    return typeof fn === 'function';
  }).reduce(function (result, fn) {
    return fn(result);
  }, rawRenderedString);

  return renderedString;
}